import React, { useState, useEffect } from "react";
import {
  Box,
  Button,
  Typography,
  Alert,
  Grid,
  Card,
  CardContent,
  CircularProgress,
} from "@mui/material";
import axios from "axios";
import API_BASES from "../apiConfig";
import { motion } from "framer-motion";
import AutoAwesomeIcon from "@mui/icons-material/AutoAwesome";
import SchoolIcon from "@mui/icons-material/School";
import RefreshIcon from "@mui/icons-material/Refresh";

// üîπ Danh s√°ch quote ƒëa d·∫°ng
const QUOTES = [
  "M·ªôt b∆∞·ªõc ti·∫øn g·∫ßn h∆°n ƒë·∫øn m·ª•c ti√™u h·ªçc t·∫≠p c·ªßa b·∫°n!",
  "H·ªçc h√¥m nay, th√†nh c√¥ng ng√†y mai!",
  "Tri th·ª©c l√† s·ª©c m·∫°nh, h√£y kh√°m ph√° ngay!",
  "Kh√°m ph√° v√† ph√°t tri·ªÉn ti·ªÅm nƒÉng b·∫£n th√¢n.",
  "M·ªói kh√≥a h·ªçc l√† m·ªôt c∆° h·ªôi m·ªõi.",
  "ƒê·ª´ng ng·∫°i th·ª≠ th√°ch, b·∫°n s·∫Ω v∆∞·ª£t qua!",
  "H·ªçc ƒë·ªÉ thay ƒë·ªïi t∆∞∆°ng lai c·ªßa b·∫°n.",
  "Th√°ch th·ª©c m·ªõi, ki·∫øn th·ª©c m·ªõi!",
  "M·ªói ng√†y m·ªôt ch√∫t, ti·∫øn b·ªô t·ª´ng b∆∞·ªõc.",
  "T·∫≠n d·ª•ng th·ªùi gian, h·ªçc ngay h√¥m nay!",
  "M·ªü r·ªông k·ªπ nƒÉng, m·ªü r·ªông c∆° h·ªôi.",
  "H·ªçc h·ªèi kh√¥ng ng·ª´ng ƒë·ªÉ d·∫´n ƒë·∫ßu.",
  "Kh√°m ph√° ki·∫øn th·ª©c, m·ªü ra c√°nh c·ª≠a th√†nh c√¥ng.",
  "ƒêam m√™ h·ªçc t·∫≠p, t·∫°o ra kh√°c bi·ªát.",
  "H·ªçc ƒë·ªÉ l√†m ch·ªß t∆∞∆°ng lai.",
  "Ki·∫øn th·ª©c h√¥m nay l√† l·ª£i th·∫ø ng√†y mai.",
  "ƒê·∫∑t m·ª•c ti√™u, chinh ph·ª•c th·ª≠ th√°ch.",
  "T·∫≠n h∆∞·ªüng h√†nh tr√¨nh h·ªçc t·∫≠p.",
  "M·ªói kh√≥a h·ªçc l√† m·ªôt b·ª©c tranh tri th·ª©c.",
  "Ph√°t tri·ªÉn b·∫£n th√¢n, v∆∞∆°n t·ªõi ∆∞·ªõc m∆°.",
];

export default function Recommendation({ token }) {
  const [courses, setCourses] = useState([]);
  const [msg, setMsg] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchRecommend = async () => {
    setMsg(null);
    setLoading(true);
    try {
      const res = await axios.post(
        `${API_BASES.recommendation}/recommend-courses`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      const data = Array.isArray(res.data?.courses) ? res.data.courses : [];
      setCourses(data);

      if (!data || data.length === 0) {
        setMsg({ type: "info", text: "Hi·ªán ch∆∞a c√≥ g·ª£i √Ω n√†o!" });
      }
    } catch (err) {
      console.error("L·ªói l·∫•y g·ª£i √Ω:", err, err?.response?.data);
      setMsg({ type: "error", text: "Kh√¥ng l·∫•y ƒë∆∞·ª£c g·ª£i √Ω!" });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (token) fetchRecommend();
  }, [token]);

  const getQuote = (idx) => QUOTES[idx % QUOTES.length];

  return (
    <Box
      sx={{
        p: 3,
        borderRadius: 4,
        background: "linear-gradient(135deg, #fdfbfb, #ebedee)",
        boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
        position: "relative",
      }}
      component={motion.div}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.6 }}
    >
      {/* Header */}
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 3,
        }}
      >
        <Typography
          variant="h4"
          sx={{
            fontWeight: 700,
            color: "#1976d2",
            display: "flex",
            alignItems: "center",
            gap: 1,
          }}
          component={motion.div}
          initial={{ y: -10, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <AutoAwesomeIcon sx={{ color: "#ff9800" }} /> G·ª£i √Ω kh√≥a h·ªçc
        </Typography>

        <Button
          variant="contained"
          color="primary"
          onClick={fetchRecommend}
          startIcon={<RefreshIcon />}
          disabled={loading}
          sx={{ px: 3, py: 1, borderRadius: 3 }}
        >
          {loading ? "ƒêang t·∫£i..." : "L·∫•y g·ª£i √Ω"}
        </Button>
      </Box>

      {/* Th√¥ng b√°o */}
      {msg && (
        <Alert
          severity={msg.type}
          sx={{ mb: 3 }}
          component={motion.div}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
        >
          {msg.text}
        </Alert>
      )}

      {/* Loading */}
      {loading && (
        <Box sx={{ textAlign: "center", mt: 4 }}>
          <CircularProgress color="primary" size={50} />
          <Typography sx={{ mt: 2, color: "text.secondary" }}>
            ƒêang t·∫£i g·ª£i √Ω...
          </Typography>
        </Box>
      )}

      {/* Grid danh s√°ch kh√≥a h·ªçc */}
      {!loading && courses.length > 0 && (
        <Grid container spacing={3}>
          {courses.map((course, idx) => (
            <Grid item xs={12} sm={6} md={4} key={idx}>
              <Card
                sx={{
                  height: "100%",
                  display: "flex",
                  flexDirection: "column",
                  justifyContent: "center",
                  borderRadius: 3,
                  boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
                  background: "linear-gradient(145deg, #ffffff, #e3f2fd)",
                  "&:hover": {
                    transform: "scale(1.05)",
                    transition: "0.3s ease-in-out",
                    boxShadow: "0 6px 20px rgba(0,0,0,0.15)",
                  },
                }}
                component={motion.div}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: idx * 0.05 }}
              >
                <CardContent
                  sx={{
                    flex: 1,
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "center",
                    alignItems: "center",
                    textAlign: "center",
                    p: 3,
                  }}
                >
                  <SchoolIcon sx={{ fontSize: 40, color: "#1976d2", mb: 1 }} />
                  <Typography
                    variant="h6"
                    sx={{
                      fontWeight: 600,
                      color: "#333",
                      minHeight: "48px",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      textAlign: "center",
                    }}
                  >
                    {course}
                  </Typography>
                  <Typography
                    variant="body2"
                    sx={{
                      mt: 1,
                      color: "#555",
                      fontStyle: "italic",
                      minHeight: "40px",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      textAlign: "center",
                    }}
                  >
                    {getQuote(idx)}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Kh√¥ng c√≥ g·ª£i √Ω */}
      {!loading && courses.length === 0 && !msg && (
        <Typography
          variant="body1"
          color="text.secondary"
          sx={{ textAlign: "center", mt: 2 }}
        >
          Hi·ªán ch∆∞a c√≥ g·ª£i √Ω n√†o. H√£y nh·∫•n "L·∫•y g·ª£i √Ω" ƒë·ªÉ kh√°m ph√°!
        </Typography>
      )}
    </Box>
  );
}
